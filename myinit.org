#+TITLE: My GNU Emacs configuration
#+STARTUP: indent 
#+OPTIONS: H:5 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+DESCRIPTION: Loading emacs configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing

* interface
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)

  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (global-linum-mode t)
  (show-paren-mode t)
  (setq ring-bell-function 'ignore)
  (set-face-attribute 'default nil :height 120)
  (load-theme 'deeper-blue t)

  (require 'package)
  ;(setq package-enable-at-startup nil)
  ;(add-to-list 'package-archives
  ;	     '("melpa" . "https://melpa.org/packages/"))

  (setq package-archives
          '(("marmalade"   . "http://marmalade-repo.org/packages/")
            ("gnu"         . "http://elpa.gnu.org/packages/")
            ("org"         . "http://orgmode.org/elpa/")
            ("melpa"       . "https://melpa.org/packages/")
            ("melpa-stable" . "https://stable.melpa.org/packages/")))

  (package-initialize)

  ;; Bootstrap `use-package'
  (unless (package-installed-p 'use-package)
	  (package-refresh-contents)
	  (package-install 'use-package))

  ;; === SETUP ===
  ;(require 'package) ;; You might already have this line
  ;(package-initialize)

  ;; === CUSTOM CHECK FUNCTION ===
  (defun ensure-package-installed (&rest packages)
    "Assure every package is installed, ask for installation if itâ€™s not.
     Return a list of installed packages or nil for every skipped package."
    (mapcar
     (lambda (package)
       (unless (package-installed-p package)
	 (package-install package)))
       packages)
  )


    ;; === List my packages ===
    ;; simply add package names to the list
    (ensure-package-installed
     'magit
     'dash
     'popup
     'avy
     'ivy
     'ace-window
     'which-key
     'swiper
     'rainbow-mode
     'ac-emmet
     'emmet-mode
     'yasnippet
     'org-bullets
     'org-pomodoro
     'rainbow-mode
     'org-ac
     'php-mode
     'tramp
     'sound-wav

     ;; ... etc
    )
#+END_SRC

* Fullscreen
#+BEGIN_SRC emacs-lisp
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
  (add-to-list 'default-frame-alist '(fullscreen . fullheight))
#+END_SRC
* Word Warp
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode t)
#+END_SRC
* Rainbow-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'css-mode-hook (lambda () (rainbow-mode 1)))
  (add-hook 'html-mode-hook (lambda () (rainbow-mode 1)))
#+END_SRC
* UTF8
#+BEGIN_SRC emacs-lisp
  (setq locale-oding-system 'utf-8)
  (set-language-environment 'utf-8)
  ;; set the default encoding system
  (prefer-coding-system 'utf-8)
  (setq default-file-name-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
#+END_SRC
* Autocomplete
  #+BEGIN_SRC emacs-lisp
  (use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
  #+END_SRC

* try
#+BEGIN_SRC emacs-lisp
(use-package try
	:ensure t)
#+END_SRC

* which key
  Brings up some help
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
	:ensure t 
	:config
	(which-key-mode))
  #+END_SRC

* Org mode
  Org bullets makes things look pretty
  #+BEGIN_SRC emacs-lisp

        (setenv "BROWSER" "chromium-browser")

            (use-package org-bullets
            :ensure t
            :config
            (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

                (custom-set-variables
                 '(org-directory "C:/Users/wartran/Dropbox/org")
                 '(org-default-notes-file (concat org-directory "/notes.org"))
                 '(org-export-html-postamble nil)
                 '(org-hide-leading-stars t)
                 '(org-startup-folded (quote overview))
                 '(org-startup-indented t)
                 )

                (setq org-file-apps
        	      (append '(
                		("\\.pdf\\'" . "evince %s")
                		) org-file-apps ))

                (global-set-key "\C-ca" 'org-agenda)

                (setq org-agenda-custom-commands
                '(("c" "Simple agenda view"
                ((agenda "")
                (alltodo "")))))

                (use-package org-ac
  		:ensure t
  		:init (progn
                		(require 'org-ac)
                		(org-ac/config-default)
                		))

                (global-set-key (kbd "C-c c") 'org-capture)

                (setq org-agenda-files (list "~/Dropbox/orgfiles/gcal.org"
                			     "~/Dropbox/orgfiles/i.org"
                			     "~/Dropbox/orgfiles/schedule.org"))
                (setq org-capture-templates
                			'(("a" "Appointment" entry (file  "~/Dropbox/orgfiles/gcal.org" )
                				 "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
                				("l" "Link" entry (file+headline "~/Dropbox/orgfiles/links.org" "Links")
                				 "* %? %^L %^g \n%T" :prepend t)
                				("b" "Blog idea" entry (file+headline "~/Dropbox/orgfiles/i.org" "Blog Topics:")
                				 "* %?\n%T" :prepend t)
                				("t" "To Do Item" entry (file+headline "~/Dropbox/orgfiles/i.org" "To Do")
                				 "* TODO %?\n%u" :prepend t)
        					("m" "Mail To Do" entry (file+headline "~/Dropbox/orgfiles/i.org" "To Do")
        					 "* TODO %a\n %?" :prepend t)

        					("n" "Note" entry (file+headline "~/Dropbox/orgfiles/i.org" "Note space")
                				 "* %?\n%u" :prepend t)
        					))
  #+END_SRC

  #+RESULTS:
  : make-capture-frame

* Ace windows for easy window switching
  #+BEGIN_SRC emacs-lisp
  (use-package ace-window
  :ensure t
  :init
  (progn
  (setq aw-scope 'frame)
  (global-set-key (kbd "C-x O") 'other-frame)
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
    ))
  #+END_SRC

  #+RESULTS:

* Swiper / Ivy / Counsel
  Swiper gives us a really efficient incremental search with regular expressions
  and Ivy / Counsel replace a lot of ido or helms completion functionality
  #+BEGIN_SRC emacs-lisp
  



   (use-package counsel
:ensure t
  :bind
  (("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line)))




  (use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy))


  (use-package swiper
  :ensure t
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
  #+END_SRC

* Avy - navigate by searching for a letter on the screen and jumping to it
  See https://github.com/abo-abo/avy for more info
  #+BEGIN_SRC emacs-lisp
  (use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-word-1)) ;; changed from char as per jcs
  #+END_SRC

* divers
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)

  (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)

  (defun ido-recentf-open ()
    "Use `ido-completing-read' to \\[find-file] a recent file"
    (interactive)
    (if (find-file (ido-completing-read "Find recent file: " recentf-list))
	(message "Opening file...")
      (message "Aborting")))

  (add-to-list 'exec-path "C:/msys64/usr/bin")

  (require 'tramp)
  (set-default 'tramp-auto-save-directory "C:/Users/wartran/AppData/Local/Temp")
  (setq tramp-default-method "plink")
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(package-selected-packages
     (quote
      (org-babel-eval-in-repl twig-mode jekyll-modes php-mode markdown-mode magit use-package))))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )

  (require 'emmet-mode)
  (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'sgml-mode-hook 'add-emmet-expand-to-smart-tab-completions)
  (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
  (add-hook 'css-mode-hook 'add-emmet-expand-to-smart-tab-completions)
  (add-hook 'html-mode-hook 'emmet-mode)

  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))

  (eval-after-load 'php-mode
    '(require 'php-ext))
  (autoload 'php-mode "php-mode" "Major mode for editing php code." t)
  (add-to-list 'auto-mode-alist '("\\.php$" . php-mode))
  (add-to-list 'auto-mode-alist '("\\.inc$" . php-mode))

  (add-to-list 'auto-mode-alist '("\\.md$" . jekyll-markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.html" . jekyll-html-mode))

  (require 'twig-mode)

  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (global-set-key "\C-s" 'swiper)

#+END_SRC

* Yasnippet
#+BEGIN_SRC emacs-lisp
  (defun shk-yas/helm-prompt (prompt choices &optional display-fn)
      "Use helm to select a snippet. Put this into `yas-prompt-functions.'"
      (interactive)
      (setq display-fn (or display-fn 'identity))
      (if (require 'helm-config)
          (let (tmpsource cands result rmap)
            (setq cands (mapcar (lambda (x) (funcall display-fn x)) choices))
            (setq rmap (mapcar (lambda (x) (cons (funcall display-fn x) x)) choices))
            (setq tmpsource
                  (list
                   (cons 'name prompt)
                   (cons 'candidates cands)
                   '(action . (("Expand" . (lambda (selection) selection))))
                   ))
            (setq result (helm-other-buffer '(tmpsource) "*helm-select-yasnippet"))
            (if (null result)
		(signal 'quit "user quit!")
              (cdr (assoc result rmap))))
	nil))

  ;;; use popup menu for yas-choose-value
  (require 'popup)

  (defun yas-popup-isearch-prompt (prompt choices &optional display-fn)
    (when (featurep 'popup)
      (popup-menu*
       (mapcar
	(lambda (choice)
          (popup-make-item
           (or (and display-fn (funcall display-fn choice))
               choice)
           :value choice))
	choices)
       :prompt prompt
       ;; start isearch mode immediately
       :isearch t
       )))

  (setq yas-prompt-functions '(yas-popup-isearch-prompt yas-ido-prompt yas-no-prompt))

  ;; Completing point by some yasnippet key
  (defun yas-ido-expand ()
    "Lets you select (and expand) a yasnippet key"
    (interactive)
      (let ((original-point (point)))
	(while (and
		(not (= (point) (point-min) ))
		(not
		 (string-match "[[:space:]\n]" (char-to-string (char-before)))))
          (backward-word 1))
      (let* ((init-word (point))
             (word (buffer-substring init-word original-point))
             (list (yas-active-keys)))
	(goto-char original-point)
	(let ((key (remove-if-not
                    (lambda (s) (string-match (concat "^" word) s)) list)))
          (if (= (length key) 1)
              (setq key (pop key))
            (setq key (ido-completing-read "key: " list nil nil word)))
          (delete-char (- init-word original-point))
          (insert key)
          (yas-expand)))))
#+END_SRC

* Pomodoro
#+BEGIN_SRC  emacs-lisp
  (setq org-pomodoro-length 25)
  (setq org-pomodoro-short-break-length 5)
  (setq org-pomodoro-long-break-length 15)
  (setq org-pomodoro-play-sounds 1)
#+END_SRC

* Initial scratch buffer message
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message "less is more")
#+END_SRC

* Mac Keyboard
#+BEGIN_SRC emacs-lisp
  (setq mac-option-modifier 'none)
  (setq mac-command-modifier 'meta)
  (setq ns-function-modifier 'hyper)
#+END_SRC

* scratch default org-mode
#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'org-mode)
#+END_SRC
